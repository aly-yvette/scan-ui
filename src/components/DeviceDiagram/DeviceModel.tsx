/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import { useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

// @ts-ignore - import unsupported
import device from './device.glb'

// Importing this will change the global frameloop, breaking web animations
import { useSpring, animated, config } from '@react-spring/three'
import { Globals } from '@react-spring/web'
Globals.assign({
    frameLoop: 'always',
})

type GLTFResult = GLTF & {
    nodes: {
        Scale: THREE.Mesh
        ScannerMesh: THREE.Mesh
        ScannerMesh_1: THREE.Mesh
        Placeholder: THREE.Mesh
    }
    materials: {
        Material: THREE.MeshStandardMaterial
        ScannerWindow: THREE.MeshStandardMaterial
    }
}

type Props = {
    scanning: boolean
    placeholderHeight: number
}

export function DeviceModel({ scanning, placeholderHeight, ...props }: JSX.IntrinsicElements['group'] & Props) {

    const { nodes, materials } = useGLTF(device) as GLTFResult

    const baseMaterial = new THREE.MeshStandardMaterial({ color: 'white' })

    useEffect(() => {
        materials.ScannerWindow.color.setColorName(scanning ? 'red' : 'white')
    }, [scanning, materials])

    const { pos } = useSpring({
        from: { pos: 1 },
        to: { pos: 0 },
        loop: true,
        config: config.wobbly,
    })

    return (
        <group {...props} dispose={null}>
            <mesh
                name="Scale"
                receiveShadow
                geometry={nodes.Scale.geometry}
                material={materials.Material}
                position={[0, -0.104, 0]}
            />
            <group name="Scanner" position={[0, -0.115, 0]}>
                <mesh
                    name="ScannerMesh"

                    receiveShadow
                    geometry={nodes.ScannerMesh.geometry}
                    material={baseMaterial}
                />
                <mesh
                    name="ScannerMesh_1"
                    receiveShadow
                    geometry={nodes.ScannerMesh_1.geometry}
                    material={materials.ScannerWindow}
                />
            </group>
            <animated.mesh position-y={pos}>
                <mesh
                    name="Placeholder"
                    castShadow
                    receiveShadow
                    geometry={nodes.Placeholder.geometry}
                    material={baseMaterial}
                />
            </animated.mesh>
        </group>
    )
}

useGLTF.preload(device)
